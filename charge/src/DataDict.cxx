//
// File generated by rootcint at Tue Nov 13 16:29:57 2012

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DataDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DataDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Channel_t_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Channel_t(void *p = 0);
   static void *newArray_Channel_t(Long_t size, void *p);
   static void delete_Channel_t(void *p);
   static void deleteArray_Channel_t(void *p);
   static void destruct_Channel_t(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Channel_t*)
   {
      ::Channel_t *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Channel_t >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Channel_t", ::Channel_t::Class_Version(), "./Data.h", 46,
                  typeid(::Channel_t), DefineBehavior(ptr, ptr),
                  &::Channel_t::Dictionary, isa_proxy, 4,
                  sizeof(::Channel_t) );
      instance.SetNew(&new_Channel_t);
      instance.SetNewArray(&newArray_Channel_t);
      instance.SetDelete(&delete_Channel_t);
      instance.SetDeleteArray(&deleteArray_Channel_t);
      instance.SetDestructor(&destruct_Channel_t);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Channel_t*)
   {
      return GenerateInitInstanceLocal((::Channel_t*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Channel_t*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MidasHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MidasHeader(void *p = 0);
   static void *newArray_MidasHeader(Long_t size, void *p);
   static void delete_MidasHeader(void *p);
   static void deleteArray_MidasHeader(void *p);
   static void destruct_MidasHeader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MidasHeader*)
   {
      ::MidasHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MidasHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MidasHeader", ::MidasHeader::Class_Version(), "./Data.h", 67,
                  typeid(::MidasHeader), DefineBehavior(ptr, ptr),
                  &::MidasHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MidasHeader) );
      instance.SetNew(&new_MidasHeader);
      instance.SetNewArray(&newArray_MidasHeader);
      instance.SetDelete(&delete_MidasHeader);
      instance.SetDeleteArray(&deleteArray_MidasHeader);
      instance.SetDestructor(&destruct_MidasHeader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MidasHeader*)
   {
      return GenerateInitInstanceLocal((::MidasHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MidasHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void CaenHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CaenHeader(void *p = 0);
   static void *newArray_CaenHeader(Long_t size, void *p);
   static void delete_CaenHeader(void *p);
   static void deleteArray_CaenHeader(void *p);
   static void destruct_CaenHeader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CaenHeader*)
   {
      ::CaenHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CaenHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CaenHeader", ::CaenHeader::Class_Version(), "./Data.h", 92,
                  typeid(::CaenHeader), DefineBehavior(ptr, ptr),
                  &::CaenHeader::Dictionary, isa_proxy, 4,
                  sizeof(::CaenHeader) );
      instance.SetNew(&new_CaenHeader);
      instance.SetNewArray(&newArray_CaenHeader);
      instance.SetDelete(&delete_CaenHeader);
      instance.SetDeleteArray(&deleteArray_CaenHeader);
      instance.SetDestructor(&destruct_CaenHeader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CaenHeader*)
   {
      return GenerateInitInstanceLocal((::CaenHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CaenHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void UserHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_UserHeader(void *p = 0);
   static void *newArray_UserHeader(Long_t size, void *p);
   static void delete_UserHeader(void *p);
   static void deleteArray_UserHeader(void *p);
   static void destruct_UserHeader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::UserHeader*)
   {
      ::UserHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::UserHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("UserHeader", ::UserHeader::Class_Version(), "./Data.h", 123,
                  typeid(::UserHeader), DefineBehavior(ptr, ptr),
                  &::UserHeader::Dictionary, isa_proxy, 4,
                  sizeof(::UserHeader) );
      instance.SetNew(&new_UserHeader);
      instance.SetNewArray(&newArray_UserHeader);
      instance.SetDelete(&delete_UserHeader);
      instance.SetDeleteArray(&deleteArray_UserHeader);
      instance.SetDestructor(&destruct_UserHeader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::UserHeader*)
   {
      return GenerateInitInstanceLocal((::UserHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::UserHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void OdbSettings_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_OdbSettings(void *p = 0);
   static void *newArray_OdbSettings(Long_t size, void *p);
   static void delete_OdbSettings(void *p);
   static void deleteArray_OdbSettings(void *p);
   static void destruct_OdbSettings(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::OdbSettings*)
   {
      ::OdbSettings *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::OdbSettings >(0);
      static ::ROOT::TGenericClassInfo 
         instance("OdbSettings", ::OdbSettings::Class_Version(), "./Data.h", 147,
                  typeid(::OdbSettings), DefineBehavior(ptr, ptr),
                  &::OdbSettings::Dictionary, isa_proxy, 4,
                  sizeof(::OdbSettings) );
      instance.SetNew(&new_OdbSettings);
      instance.SetNewArray(&newArray_OdbSettings);
      instance.SetDelete(&delete_OdbSettings);
      instance.SetDeleteArray(&deleteArray_OdbSettings);
      instance.SetDestructor(&destruct_OdbSettings);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::OdbSettings*)
   {
      return GenerateInitInstanceLocal((::OdbSettings*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::OdbSettings*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Data_t_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Data_t(void *p = 0);
   static void *newArray_Data_t(Long_t size, void *p);
   static void delete_Data_t(void *p);
   static void deleteArray_Data_t(void *p);
   static void destruct_Data_t(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Data_t*)
   {
      ::Data_t *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Data_t >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Data_t", ::Data_t::Class_Version(), "./Data.h", 203,
                  typeid(::Data_t), DefineBehavior(ptr, ptr),
                  &::Data_t::Dictionary, isa_proxy, 4,
                  sizeof(::Data_t) );
      instance.SetNew(&new_Data_t);
      instance.SetNewArray(&newArray_Data_t);
      instance.SetDelete(&delete_Data_t);
      instance.SetDeleteArray(&deleteArray_Data_t);
      instance.SetDestructor(&destruct_Data_t);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Data_t*)
   {
      return GenerateInitInstanceLocal((::Data_t*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Data_t*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Run_t_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Run_t(void *p = 0);
   static void *newArray_Run_t(Long_t size, void *p);
   static void delete_Run_t(void *p);
   static void deleteArray_Run_t(void *p);
   static void destruct_Run_t(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Run_t*)
   {
      ::Run_t *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Run_t >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Run_t", ::Run_t::Class_Version(), "./Data.h", 263,
                  typeid(::Run_t), DefineBehavior(ptr, ptr),
                  &::Run_t::Dictionary, isa_proxy, 4,
                  sizeof(::Run_t) );
      instance.SetNew(&new_Run_t);
      instance.SetNewArray(&newArray_Run_t);
      instance.SetDelete(&delete_Run_t);
      instance.SetDeleteArray(&deleteArray_Run_t);
      instance.SetDestructor(&destruct_Run_t);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Run_t*)
   {
      return GenerateInitInstanceLocal((::Run_t*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Run_t*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Channel_t::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Channel_t::Class_Name()
{
   return "Channel_t";
}

//______________________________________________________________________________
const char *Channel_t::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Channel_t*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Channel_t::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Channel_t*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Channel_t::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Channel_t*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Channel_t::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Channel_t*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MidasHeader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MidasHeader::Class_Name()
{
   return "MidasHeader";
}

//______________________________________________________________________________
const char *MidasHeader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MidasHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MidasHeader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MidasHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MidasHeader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MidasHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MidasHeader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MidasHeader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *CaenHeader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CaenHeader::Class_Name()
{
   return "CaenHeader";
}

//______________________________________________________________________________
const char *CaenHeader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CaenHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CaenHeader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CaenHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CaenHeader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CaenHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CaenHeader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CaenHeader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *UserHeader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *UserHeader::Class_Name()
{
   return "UserHeader";
}

//______________________________________________________________________________
const char *UserHeader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::UserHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int UserHeader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::UserHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void UserHeader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::UserHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *UserHeader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::UserHeader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *OdbSettings::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *OdbSettings::Class_Name()
{
   return "OdbSettings";
}

//______________________________________________________________________________
const char *OdbSettings::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::OdbSettings*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int OdbSettings::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::OdbSettings*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void OdbSettings::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::OdbSettings*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *OdbSettings::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::OdbSettings*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Data_t::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Data_t::Class_Name()
{
   return "Data_t";
}

//______________________________________________________________________________
const char *Data_t::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Data_t*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Data_t::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Data_t*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Data_t::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Data_t*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Data_t::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Data_t*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Run_t::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Run_t::Class_Name()
{
   return "Run_t";
}

//______________________________________________________________________________
const char *Run_t::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Run_t*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Run_t::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Run_t*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Run_t::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Run_t*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Run_t::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Run_t*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MidasHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MidasHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MidasHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MidasHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MidasHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MidasHeader.
      TClass *R__cl = ::MidasHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_id", &event_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger_mask", &trigger_mask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "serial_nb", &serial_nb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_stamp", &time_stamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data_size", &data_size);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MidasHeader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MidasHeader : new ::MidasHeader;
   }
   static void *newArray_MidasHeader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MidasHeader[nElements] : new ::MidasHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MidasHeader(void *p) {
      delete ((::MidasHeader*)p);
   }
   static void deleteArray_MidasHeader(void *p) {
      delete [] ((::MidasHeader*)p);
   }
   static void destruct_MidasHeader(void *p) {
      typedef ::MidasHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MidasHeader

//______________________________________________________________________________
void CaenHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class CaenHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CaenHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(CaenHeader::Class(),this);
   }
}

//______________________________________________________________________________
void CaenHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CaenHeader.
      TClass *R__cl = ::CaenHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caenID", &caenID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventSize", &eventSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "boardID", &boardID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "res", &res);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pattern", &pattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "group_mask", &group_mask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reserved", &reserved);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_count", &event_count);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger_time_tag", &trigger_time_tag);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CaenHeader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CaenHeader : new ::CaenHeader;
   }
   static void *newArray_CaenHeader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CaenHeader[nElements] : new ::CaenHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_CaenHeader(void *p) {
      delete ((::CaenHeader*)p);
   }
   static void deleteArray_CaenHeader(void *p) {
      delete [] ((::CaenHeader*)p);
   }
   static void destruct_CaenHeader(void *p) {
      typedef ::CaenHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CaenHeader

//______________________________________________________________________________
void UserHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class UserHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(UserHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(UserHeader::Class(),this);
   }
}

//______________________________________________________________________________
void UserHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class UserHeader.
      TClass *R__cl = ::UserHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nb_gr", &nb_gr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nb_ch", &nb_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nb_dt", &nb_dt);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_UserHeader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::UserHeader : new ::UserHeader;
   }
   static void *newArray_UserHeader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::UserHeader[nElements] : new ::UserHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_UserHeader(void *p) {
      delete ((::UserHeader*)p);
   }
   static void deleteArray_UserHeader(void *p) {
      delete [] ((::UserHeader*)p);
   }
   static void destruct_UserHeader(void *p) {
      typedef ::UserHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::UserHeader

//______________________________________________________________________________
void Channel_t::Streamer(TBuffer &R__b)
{
   // Stream an object of class Channel_t.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Channel_t::Class(),this);
   } else {
      R__b.WriteClassBuffer(Channel_t::Class(),this);
   }
}

//______________________________________________________________________________
void Channel_t::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Channel_t.
      TClass *R__cl = ::Channel_t::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ID", &ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DT", &DT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "groupID", &groupID);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Channel_t(void *p) {
      return  p ? new(p) ::Channel_t : new ::Channel_t;
   }
   static void *newArray_Channel_t(Long_t nElements, void *p) {
      return p ? new(p) ::Channel_t[nElements] : new ::Channel_t[nElements];
   }
   // Wrapper around operator delete
   static void delete_Channel_t(void *p) {
      delete ((::Channel_t*)p);
   }
   static void deleteArray_Channel_t(void *p) {
      delete [] ((::Channel_t*)p);
   }
   static void destruct_Channel_t(void *p) {
      typedef ::Channel_t current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Channel_t

//______________________________________________________________________________
void OdbSettings::Streamer(TBuffer &R__b)
{
   // Stream an object of class OdbSettings.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(OdbSettings::Class(),this);
   } else {
      R__b.WriteClassBuffer(OdbSettings::Class(),this);
   }
}

//______________________________________________________________________________
void OdbSettings::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class OdbSettings.
      TClass *R__cl = ::OdbSettings::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mini_freq", &mini_freq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mini_duration", &mini_duration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "global_range_min", &global_range_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "group_range_min[8]", group_range_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "global_trig_thres", &global_trig_thres);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "group_trig_thres[8]", group_trig_thres);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calib_slope[64]", calib_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calib_offset[64]", calib_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "post_trigger", &post_trigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "group_muliplicity", &group_muliplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "group_enable[8]", group_enable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel_enable[64]", channel_enable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ext_trig", &ext_trig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "local_trig", &local_trig);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_OdbSettings(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::OdbSettings : new ::OdbSettings;
   }
   static void *newArray_OdbSettings(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::OdbSettings[nElements] : new ::OdbSettings[nElements];
   }
   // Wrapper around operator delete
   static void delete_OdbSettings(void *p) {
      delete ((::OdbSettings*)p);
   }
   static void deleteArray_OdbSettings(void *p) {
      delete [] ((::OdbSettings*)p);
   }
   static void destruct_OdbSettings(void *p) {
      typedef ::OdbSettings current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::OdbSettings

//______________________________________________________________________________
void Data_t::Streamer(TBuffer &R__b)
{
   // Stream an object of class Data_t.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Data_t::Class(),this);
   } else {
      R__b.WriteClassBuffer(Data_t::Class(),this);
   }
}

//______________________________________________________________________________
void Data_t::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Data_t.
      TClass *R__cl = ::Data_t::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MidHdr", &MidHdr);
      R__insp.InspectMember(MidHdr, "MidHdr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CaenHdr", &CaenHdr);
      R__insp.InspectMember(CaenHdr, "CaenHdr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "UserHdr", &UserHdr);
      R__insp.InspectMember(UserHdr, "UserHdr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "OdbSet", &OdbSet);
      R__insp.InspectMember(OdbSet, "OdbSet.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*chan", &chan);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Data_t(void *p) {
      return  p ? new(p) ::Data_t : new ::Data_t;
   }
   static void *newArray_Data_t(Long_t nElements, void *p) {
      return p ? new(p) ::Data_t[nElements] : new ::Data_t[nElements];
   }
   // Wrapper around operator delete
   static void delete_Data_t(void *p) {
      delete ((::Data_t*)p);
   }
   static void deleteArray_Data_t(void *p) {
      delete [] ((::Data_t*)p);
   }
   static void destruct_Data_t(void *p) {
      typedef ::Data_t current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Data_t

//______________________________________________________________________________
void Run_t::Streamer(TBuffer &R__b)
{
   // Stream an object of class Run_t.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Run_t::Class(),this);
   } else {
      R__b.WriteClassBuffer(Run_t::Class(),this);
   }
}

//______________________________________________________________________________
void Run_t::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Run_t.
      TClass *R__cl = ::Run_t::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*f", &f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "duration", &duration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*groupIDs", &groupIDs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*timeScale", &timeScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentEventID", &currentEventID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentSerialChannelNumber", &currentSerialChannelNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawData", &rawData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*scaledData", &scaledData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calibratedData", &calibratedData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*frequencySpectrum", &frequencySpectrum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*butterworthFilter", &butterworthFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "midasTimeStamp", &midasTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caenTimeStamp", &caenTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*serv", &serv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentRunName", (void*)&currentRunName);
      R__insp.InspectMember("string", (void*)&currentRunName, "currentRunName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseCalibDB", &fUseCalibDB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CalibValues[64][5]", CalibValues);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Run_t(void *p) {
      return  p ? new(p) ::Run_t : new ::Run_t;
   }
   static void *newArray_Run_t(Long_t nElements, void *p) {
      return p ? new(p) ::Run_t[nElements] : new ::Run_t[nElements];
   }
   // Wrapper around operator delete
   static void delete_Run_t(void *p) {
      delete ((::Run_t*)p);
   }
   static void deleteArray_Run_t(void *p) {
      delete [] ((::Run_t*)p);
   }
   static void destruct_Run_t(void *p) {
      typedef ::Run_t current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Run_t

/********************************************************
* DataDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDataDict();

extern "C" void G__set_cpp_environmentDataDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Data.h");
  G__cpp_reset_tagtableDataDict();
}
#include <new>
extern "C" int G__cpp_dllrevDataDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Channel_t */
static int G__DataDict_556_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Channel_t* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Channel_t[n];
     } else {
       p = new((void*) gvp) Channel_t[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Channel_t;
     } else {
       p = new((void*) gvp) Channel_t;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_Channel_t));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Channel_t*) G__getstructoffset())->Init((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Channel_t*) G__getstructoffset())->Data((int*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Channel_t*) G__getstructoffset())->GetGroupID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Channel_t*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Channel_t*) G__getstructoffset())->GetDT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Channel_t*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Channel_t::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Channel_t::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Channel_t::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Channel_t::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Channel_t*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Channel_t::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Channel_t::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Channel_t::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_556_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Channel_t::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataDict_556_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Channel_t* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Channel_t(*(Channel_t*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_Channel_t));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Channel_t G__TChannel_t;
static int G__DataDict_556_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Channel_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Channel_t*) (soff+(sizeof(Channel_t)*i)))->~G__TChannel_t();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Channel_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Channel_t*) (soff))->~G__TChannel_t();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataDict_556_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Channel_t* dest = (Channel_t*) G__getstructoffset();
   *dest = *(Channel_t*) libp->para[0].ref;
   const Channel_t& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MidasHeader */
static int G__DataDict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MidasHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MidasHeader[n];
     } else {
       p = new((void*) gvp) MidasHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MidasHeader;
     } else {
       p = new((void*) gvp) MidasHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_MidasHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MidasHeader*) G__getstructoffset())->Set((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MidasHeader*) G__getstructoffset())->GetEventId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MidasHeader*) G__getstructoffset())->GetTriggerMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MidasHeader*) G__getstructoffset())->GetSerialNb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MidasHeader*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MidasHeader*) G__getstructoffset())->GetDataSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MidasHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MidasHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MidasHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MidasHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MidasHeader*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MidasHeader*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MidasHeader*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MidasHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MidasHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MidasHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MidasHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_557_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MidasHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataDict_557_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MidasHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MidasHeader(*(MidasHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_MidasHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MidasHeader G__TMidasHeader;
static int G__DataDict_557_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MidasHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MidasHeader*) (soff+(sizeof(MidasHeader)*i)))->~G__TMidasHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MidasHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MidasHeader*) (soff))->~G__TMidasHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataDict_557_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MidasHeader* dest = (MidasHeader*) G__getstructoffset();
   *dest = *(MidasHeader*) libp->para[0].ref;
   const MidasHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CaenHeader */
static int G__DataDict_558_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CaenHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CaenHeader[n];
     } else {
       p = new((void*) gvp) CaenHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CaenHeader;
     } else {
       p = new((void*) gvp) CaenHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_CaenHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CaenHeader*) G__getstructoffset())->Set(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (unsigned int) G__int(libp->para[7])
, (unsigned int) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetCaenID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetEventSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetBoardID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetPattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetGroupMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetReserved());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetEventCount());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const CaenHeader*) G__getstructoffset())->GetTriggerTimeTag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CaenHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CaenHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CaenHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CaenHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const CaenHeader*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CaenHeader*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CaenHeader*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CaenHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CaenHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CaenHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CaenHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_558_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CaenHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataDict_558_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CaenHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CaenHeader(*(CaenHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_CaenHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CaenHeader G__TCaenHeader;
static int G__DataDict_558_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CaenHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CaenHeader*) (soff+(sizeof(CaenHeader)*i)))->~G__TCaenHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CaenHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CaenHeader*) (soff))->~G__TCaenHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataDict_558_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CaenHeader* dest = (CaenHeader*) G__getstructoffset();
   *dest = *(CaenHeader*) libp->para[0].ref;
   const CaenHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* UserHeader */
static int G__DataDict_559_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UserHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UserHeader[n];
     } else {
       p = new((void*) gvp) UserHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UserHeader;
     } else {
       p = new((void*) gvp) UserHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_UserHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UserHeader*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const UserHeader*) G__getstructoffset())->GetNbGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const UserHeader*) G__getstructoffset())->GetNbChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const UserHeader*) G__getstructoffset())->GetNbDt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) UserHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UserHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) UserHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      UserHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const UserHeader*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UserHeader*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UserHeader*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UserHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UserHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UserHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UserHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_559_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UserHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataDict_559_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   UserHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new UserHeader(*(UserHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_UserHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef UserHeader G__TUserHeader;
static int G__DataDict_559_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (UserHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((UserHeader*) (soff+(sizeof(UserHeader)*i)))->~G__TUserHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (UserHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((UserHeader*) (soff))->~G__TUserHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataDict_559_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UserHeader* dest = (UserHeader*) G__getstructoffset();
   *dest = *(UserHeader*) libp->para[0].ref;
   const UserHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* OdbSettings */
static int G__DataDict_560_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   OdbSettings* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new OdbSettings[n];
     } else {
       p = new((void*) gvp) OdbSettings[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new OdbSettings;
     } else {
       p = new((void*) gvp) OdbSettings;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_OdbSettings));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((OdbSettings*) G__getstructoffset())->Set(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double*) G__int(libp->para[5])
, (double*) G__int(libp->para[6]), (double*) G__int(libp->para[7])
, (unsigned int) G__int(libp->para[8]), (unsigned int) G__int(libp->para[9])
, (bool*) G__int(libp->para[10]), (bool*) G__int(libp->para[11])
, (bool) G__int(libp->para[12]), (bool) G__int(libp->para[13]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const OdbSettings*) G__getstructoffset())->GetMinFreq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const OdbSettings*) G__getstructoffset())->GetMiniDuration());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const OdbSettings*) G__getstructoffset())->GetGlobalRangeMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((OdbSettings*) G__getstructoffset())->GetGrpRangeMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const OdbSettings*) G__getstructoffset())->GetGlobalTrigThres());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((OdbSettings*) G__getstructoffset())->GetGrpTrigThres());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((OdbSettings*) G__getstructoffset())->GetCalibSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((OdbSettings*) G__getstructoffset())->GetCalibOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const OdbSettings*) G__getstructoffset())->GetPostTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const OdbSettings*) G__getstructoffset())->GetGrpMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((OdbSettings*) G__getstructoffset())->GetGrpEnable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((OdbSettings*) G__getstructoffset())->GetChannelEnable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const OdbSettings*) G__getstructoffset())->GetExtTrig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const OdbSettings*) G__getstructoffset())->GetLocalTrig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) OdbSettings::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) OdbSettings::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) OdbSettings::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      OdbSettings::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const OdbSettings*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((OdbSettings*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((OdbSettings*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((OdbSettings*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) OdbSettings::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) OdbSettings::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) OdbSettings::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_560_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) OdbSettings::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataDict_560_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   OdbSettings* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new OdbSettings(*(OdbSettings*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_OdbSettings));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef OdbSettings G__TOdbSettings;
static int G__DataDict_560_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (OdbSettings*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((OdbSettings*) (soff+(sizeof(OdbSettings)*i)))->~G__TOdbSettings();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (OdbSettings*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((OdbSettings*) (soff))->~G__TOdbSettings();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataDict_560_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   OdbSettings* dest = (OdbSettings*) G__getstructoffset();
   *dest = *(OdbSettings*) libp->para[0].ref;
   const OdbSettings& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Data_t */
static int G__DataDict_561_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Data_t* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Data_t[n];
     } else {
       p = new((void*) gvp) Data_t[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Data_t;
     } else {
       p = new((void*) gvp) Data_t;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_Data_t));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Data_t*) G__getstructoffset())->SetMidasHeader((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Data_t*) G__getstructoffset())->GetMidasHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Data_t*) G__getstructoffset())->SetCaenHeader(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (unsigned int) G__int(libp->para[7])
, (unsigned int) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Data_t*) G__getstructoffset())->GetCaenHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Data_t*) G__getstructoffset())->SetUserHeader((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Data_t*) G__getstructoffset())->GetUserHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Data_t*) G__getstructoffset())->SetOdbSettings(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double*) G__int(libp->para[5])
, (double*) G__int(libp->para[6]), (double*) G__int(libp->para[7])
, (unsigned int) G__int(libp->para[8]), (unsigned int) G__int(libp->para[9])
, (bool*) G__int(libp->para[10]), (bool*) G__int(libp->para[11])
, (bool) G__int(libp->para[12]), (bool) G__int(libp->para[13]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Data_t*) G__getstructoffset())->GetOdbSettings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Data_t*) G__getstructoffset())->SetChannel((Channel_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Data_t*) G__getstructoffset())->GetChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Data_t::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Data_t::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Data_t::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Data_t::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Data_t*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Data_t::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Data_t::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Data_t::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_561_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Data_t::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataDict_561_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Data_t* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Data_t(*(Data_t*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_Data_t));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Data_t G__TData_t;
static int G__DataDict_561_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Data_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Data_t*) (soff+(sizeof(Data_t)*i)))->~G__TData_t();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Data_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Data_t*) (soff))->~G__TData_t();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataDict_561_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Data_t* dest = (Data_t*) G__getstructoffset();
   *dest = *(Data_t*) libp->para[0].ref;
   const Data_t& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Run_t */
static int G__DataDict_562_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Run_t* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Run_t[n];
     } else {
       p = new((void*) gvp) Run_t[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Run_t;
     } else {
       p = new((void*) gvp) Run_t;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_Run_t));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Run_t* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Run_t((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) Run_t((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_Run_t));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->OpenRun((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->CloseRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Run_t*) G__getstructoffset())->RunLoaded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Run_t*) G__getstructoffset())->RunNotLoaded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetEventID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetEventSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetGroupMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetRunDuration());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetNumberOfEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetNumberOfGroups());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetGroupID((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetNumberOfChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetChannelID((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetNumberOfSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetSamplingFrequency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetSamplingDuration());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetGlobalInputRange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetInputRange((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetGlobalTriggerThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetTriggerThreshold((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetCalibrationFactor((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetCalibrationTerm((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetPostTriggerFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetPreTriggerFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Run_t*) G__getstructoffset())->GetExternalTriggerStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Run_t*) G__getstructoffset())->GetLocalTriggerStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetGroupMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Run_t*) G__getstructoffset())->GetGroupEnable((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Run_t*) G__getstructoffset())->GetChannelEnable((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((Run_t*) G__getstructoffset())->GetTimeScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((Run_t*) G__getstructoffset())->GetRawData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((Run_t*) G__getstructoffset())->GetScaledData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((Run_t*) G__getstructoffset())->GetCalibratedData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((Run_t*) G__getstructoffset())->GetFrequencySpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((Run_t*) G__getstructoffset())->GetFilterShape());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetCurrentEventID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Run_t*) G__getstructoffset())->GetCurrentSerialChannelNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetLowPrecisionEventTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetHighPrecisionEventRelativeTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->SetCurrentData((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((Run_t*) G__getstructoffset())->GetMinMaxRawData((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((Run_t*) G__getstructoffset())->GetMinMaxRawData((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((Run_t*) G__getstructoffset())->GetMinMaxScaledData((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((Run_t*) G__getstructoffset())->GetMinMaxScaledData((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((Run_t*) G__getstructoffset())->GetMinMaxCalibratedData((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((Run_t*) G__getstructoffset())->GetMinMaxCalibratedData((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->GetNoiseSubtractedIntegratedSignal((double*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (unsigned int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->GetNoiseSubtractedIntegratedSignal((double*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->GetNoiseSubtractedIntegratedSignal((double*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->GetNoiseSubtractedIntegratedSignal((double*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->SubtractBaseline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((Run_t*) G__getstructoffset())->GetFFTData((double*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->ApplyFilter((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Run_t*) G__getstructoffset())->GetSpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((Run_t*) G__getstructoffset())->butter((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 73, (long) ((Run_t*) G__getstructoffset())->GetChannelMapping((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 73, (long) ((Run_t*) G__getstructoffset())->GetChannelMapping((int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Run_t*) G__getstructoffset())->GetDriftVelocity((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Run_t*) G__getstructoffset())->UseCalibDB((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Run_t*) G__getstructoffset())->UseCalibDB();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Run_t*) G__getstructoffset())->GetCalibrationValues((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Run_t::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Run_t::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Run_t::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Run_t::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Run_t*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Run_t::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Run_t::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Run_t::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataDict_562_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Run_t::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataDict_562_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Run_t* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Run_t(*(Run_t*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataDictLN_Run_t));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Run_t G__TRun_t;
static int G__DataDict_562_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Run_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Run_t*) (soff+(sizeof(Run_t)*i)))->~G__TRun_t();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Run_t*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Run_t*) (soff))->~G__TRun_t();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataDict_562_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Run_t* dest = (Run_t*) G__getstructoffset();
   *dest = *(Run_t*) libp->para[0].ref;
   const Run_t& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Channel_t */

/* MidasHeader */

/* CaenHeader */

/* UserHeader */

/* OdbSettings */

/* Data_t */

/* Run_t */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDataDict {
 public:
  G__Sizep2memfuncDataDict(): p(&G__Sizep2memfuncDataDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDataDict::*p)();
};

size_t G__get_sizep2memfuncDataDict()
{
  G__Sizep2memfuncDataDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDataDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataDictLN_Channel_t))) {
     Channel_t *G__Lderived;
     G__Lderived=(Channel_t*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataDictLN_Channel_t),G__get_linked_tagnum(&G__DataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataDictLN_Data_t))) {
     Data_t *G__Lderived;
     G__Lderived=(Data_t*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataDictLN_Data_t),G__get_linked_tagnum(&G__DataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataDictLN_Run_t))) {
     Run_t *G__Lderived;
     G__Lderived=(Run_t*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataDictLN_Run_t),G__get_linked_tagnum(&G__DataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDataDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__DataDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DataDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__DataDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DataDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DataDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Channel_t */
static void G__setup_memvarChannel_t(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataDictLN_Channel_t));
   { Channel_t *p; p=(Channel_t*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TArrayI),-1,-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"ID=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"DT=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"groupID=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MidasHeader */
static void G__setup_memvarMidasHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataDictLN_MidasHeader));
   { MidasHeader *p; p=(MidasHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"event_id=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"trigger_mask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"serial_nb=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"time_stamp=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"data_size=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CaenHeader */
static void G__setup_memvarCaenHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataDictLN_CaenHeader));
   { CaenHeader *p; p=(CaenHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"caenID=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"eventSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"boardID=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"res=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"pattern=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"group_mask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"reserved=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"event_count=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"trigger_time_tag=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* UserHeader */
static void G__setup_memvarUserHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataDictLN_UserHeader));
   { UserHeader *p; p=(UserHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nb_gr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nb_ch=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nb_dt=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* OdbSettings */
static void G__setup_memvarOdbSettings(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataDictLN_OdbSettings));
   { OdbSettings *p; p=(OdbSettings*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"mini_freq=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"mini_duration=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"global_range_min=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"group_range_min[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"global_trig_thres=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"group_trig_thres[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"calib_slope[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"calib_offset[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"post_trigger=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"group_muliplicity=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"group_enable[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"channel_enable[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"ext_trig=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"local_trig=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Data_t */
static void G__setup_memvarData_t(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataDictLN_Data_t));
   { Data_t *p; p=(Data_t*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataDictLN_MidasHeader),-1,-1,4,"MidHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataDictLN_CaenHeader),-1,-1,4,"CaenHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataDictLN_UserHeader),-1,-1,4,"UserHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataDictLN_OdbSettings),-1,-1,4,"OdbSet=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TObjArray),-1,-1,4,"chan=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Run_t */
static void G__setup_memvarRun_t(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataDictLN_Run_t));
   { Run_t *p; p=(Run_t*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TFile),-1,-1,4,"f=",0,"allocated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TTree),-1,-1,4,"t=",0,"working pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_Data_t),-1,-1,4,"data=",0,"allocated");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"duration=",0,"leaf buffer");
   G__memvar_setup((void*)0,72,0,0,-1,-1,-1,4,"groupIDs=",0,"buffer for group ID's");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"timeScale=",0,"buffer for the time scale, i.e. the X-axis of the event/channel data");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"currentEventID=",0,"holds the event ID of the current event");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"currentSerialChannelNumber=",0,"holds the current serial channel number ");
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,4,"rawData=",0,"buffer for the Y-scale in raw ADC # for one channel of one event");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"scaledData=",0,"buffer for the Y-scale in [mV] for one channel of one event");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"calibratedData=",0,"buffer for the Y-scale in [nA] for one channel of one event");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"frequencySpectrum=",0,"buffer for the frequency spectrum for one channel of one event");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"butterworthFilter=",0,"buffer for the filter shape for one channel of one event");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"midasTimeStamp=",0,"event time stamp in seconds (UNIX time)");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"caenTimeStamp=",0,"hardware high resolution time stamp in number of clocks (31 bits + 1 bit overflow)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TSQLServer),-1,-1,4,"serv=",0,"pointer to mySQL database");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataDictLN_string),-1,-1,4,"currentRunName=",0,"current run name");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fUseCalibDB=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"CalibValues[64][5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDataDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncChannel_t(void) {
   /* Channel_t */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataDictLN_Channel_t));
   G__memfunc_setup("Channel_t",908,G__DataDict_556_0_1, 105, G__get_linked_tagnum(&G__DataDictLN_Channel_t), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__DataDict_556_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - groupid i - - 0 - id "
"i - - 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Data",378,G__DataDict_556_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "I - - 0 - datain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGroupID",954,G__DataDict_556_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__DataDict_556_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDT",440,G__DataDict_556_0_6, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__DataDict_556_0_7, 85, G__get_linked_tagnum(&G__DataDictLN_TArrayI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataDict_556_0_8, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Channel_t::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataDict_556_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Channel_t::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataDict_556_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Channel_t::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataDict_556_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Channel_t::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataDict_556_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataDict_556_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Channel_t::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataDict_556_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Channel_t::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataDict_556_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Channel_t::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataDict_556_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Channel_t::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Channel_t", 908, G__DataDict_556_0_20, (int) ('i'), G__get_linked_tagnum(&G__DataDictLN_Channel_t), -1, 0, 1, 1, 1, 0, "u 'Channel_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Channel_t", 1034, G__DataDict_556_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataDict_556_0_22, (int) ('u'), G__get_linked_tagnum(&G__DataDictLN_Channel_t), -1, 1, 1, 1, 1, 0, "u 'Channel_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMidasHeader(void) {
   /* MidasHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataDictLN_MidasHeader));
   G__memfunc_setup("MidasHeader",1079,G__DataDict_557_0_1, 105, G__get_linked_tagnum(&G__DataDictLN_MidasHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__DataDict_557_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"h - - 0 - ei h - - 0 - tm "
"h - - 0 - serial h - - 0 - ts "
"h - - 0 - ds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventId",975,G__DataDict_557_0_3, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerMask",1408,G__DataDict_557_0_4, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSerialNb",1072,G__DataDict_557_0_5, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__DataDict_557_0_6, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSize",1077,G__DataDict_557_0_7, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataDict_557_0_8, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MidasHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataDict_557_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MidasHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataDict_557_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MidasHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataDict_557_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MidasHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DataDict_557_0_12, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DataDict_557_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DataDict_557_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataDict_557_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataDict_557_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MidasHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataDict_557_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MidasHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataDict_557_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MidasHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataDict_557_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MidasHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MidasHeader", 1079, G__DataDict_557_0_20, (int) ('i'), G__get_linked_tagnum(&G__DataDictLN_MidasHeader), -1, 0, 1, 1, 1, 0, "u 'MidasHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MidasHeader", 1205, G__DataDict_557_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataDict_557_0_22, (int) ('u'), G__get_linked_tagnum(&G__DataDictLN_MidasHeader), -1, 1, 1, 1, 1, 0, "u 'MidasHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCaenHeader(void) {
   /* CaenHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataDictLN_CaenHeader));
   G__memfunc_setup("CaenHeader",960,G__DataDict_558_0_1, 105, G__get_linked_tagnum(&G__DataDictLN_CaenHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__DataDict_558_0_2, 121, -1, -1, 0, 9, 1, 1, 0, 
"h - - 0 - cID h - - 0 - ceS "
"h - - 0 - cbID h - - 0 - cres "
"h - - 0 - cpat h - - 0 - cg_m "
"h - - 0 - cr h - - 0 - ce_c "
"h - - 0 - cttt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaenID",804,G__DataDict_558_0_3, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventSize",1213,G__DataDict_558_0_4, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoardID",917,G__DataDict_558_0_5, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRes",586,G__DataDict_558_0_6, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPattern",1022,G__DataDict_558_0_7, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGroupMask",1209,G__DataDict_558_0_8, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReserved",1120,G__DataDict_558_0_9, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventCount",1323,G__DataDict_558_0_10, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerTimeTag",1695,G__DataDict_558_0_11, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataDict_558_0_12, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CaenHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataDict_558_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CaenHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataDict_558_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CaenHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataDict_558_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CaenHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DataDict_558_0_16, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DataDict_558_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DataDict_558_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataDict_558_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataDict_558_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CaenHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataDict_558_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CaenHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataDict_558_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CaenHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataDict_558_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CaenHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CaenHeader", 960, G__DataDict_558_0_24, (int) ('i'), G__get_linked_tagnum(&G__DataDictLN_CaenHeader), -1, 0, 1, 1, 1, 0, "u 'CaenHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CaenHeader", 1086, G__DataDict_558_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataDict_558_0_26, (int) ('u'), G__get_linked_tagnum(&G__DataDictLN_CaenHeader), -1, 1, 1, 1, 1, 0, "u 'CaenHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncUserHeader(void) {
   /* UserHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataDictLN_UserHeader));
   G__memfunc_setup("UserHeader",1000,G__DataDict_559_0_1, 105, G__get_linked_tagnum(&G__DataDictLN_UserHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__DataDict_559_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nb_group i - - 0 - nbdt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbGroup",989,G__DataDict_559_0_3, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbChannel",1161,G__DataDict_559_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbDt",648,G__DataDict_559_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataDict_559_0_6, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&UserHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataDict_559_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UserHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataDict_559_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&UserHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataDict_559_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&UserHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DataDict_559_0_10, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DataDict_559_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DataDict_559_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataDict_559_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataDict_559_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UserHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataDict_559_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UserHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataDict_559_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UserHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataDict_559_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UserHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("UserHeader", 1000, G__DataDict_559_0_18, (int) ('i'), G__get_linked_tagnum(&G__DataDictLN_UserHeader), -1, 0, 1, 1, 1, 0, "u 'UserHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~UserHeader", 1126, G__DataDict_559_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataDict_559_0_20, (int) ('u'), G__get_linked_tagnum(&G__DataDictLN_UserHeader), -1, 1, 1, 1, 1, 0, "u 'UserHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncOdbSettings(void) {
   /* OdbSettings */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataDictLN_OdbSettings));
   G__memfunc_setup("OdbSettings",1126,G__DataDict_560_0_1, 105, G__get_linked_tagnum(&G__DataDictLN_OdbSettings), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__DataDict_560_0_2, 121, -1, -1, 0, 14, 1, 1, 0, 
"d - - 0 - Omini_freq d - - 0 - Omini_duration "
"d - - 0 - Oglobal_range_min D - - 0 - Ogroup_range_min "
"d - - 0 - Oglobal_trig_thres D - - 0 - Ogroup_trig_thres "
"D - - 0 - Ocalib_slope D - - 0 - Ocalib_offset "
"h - - 0 - Opost_trigger h - - 0 - Ogroup_muliplicity "
"G - - 0 - Ogroup_enable G - - 0 - Ochannel_enable "
"g - - 0 - Oext_trig g - - 0 - Olocal_trig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinFreq",978,G__DataDict_560_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMiniDuration",1523,G__DataDict_560_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGlobalRangeMin",1666,G__DataDict_560_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrpRangeMin",1370,G__DataDict_560_0_6, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGlobalTrigThres",1805,G__DataDict_560_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrpTrigThres",1509,G__DataDict_560_0_8, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibSlope",1278,G__DataDict_560_0_9, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibOffset",1378,G__DataDict_560_0_10, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPostTrigger",1434,G__DataDict_560_0_11, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrpMultiplicity",1874,G__DataDict_560_0_12, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrpEnable",1168,G__DataDict_560_0_13, 71, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannelEnable",1568,G__DataDict_560_0_14, 71, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtTrig",999,G__DataDict_560_0_15, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLocalTrig",1185,G__DataDict_560_0_16, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataDict_560_0_17, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&OdbSettings::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataDict_560_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&OdbSettings::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataDict_560_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&OdbSettings::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataDict_560_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&OdbSettings::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__DataDict_560_0_21, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__DataDict_560_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__DataDict_560_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataDict_560_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataDict_560_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&OdbSettings::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataDict_560_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&OdbSettings::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataDict_560_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&OdbSettings::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataDict_560_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&OdbSettings::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("OdbSettings", 1126, G__DataDict_560_0_29, (int) ('i'), G__get_linked_tagnum(&G__DataDictLN_OdbSettings), -1, 0, 1, 1, 1, 0, "u 'OdbSettings' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~OdbSettings", 1252, G__DataDict_560_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataDict_560_0_31, (int) ('u'), G__get_linked_tagnum(&G__DataDictLN_OdbSettings), -1, 1, 1, 1, 1, 0, "u 'OdbSettings' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncData_t(void) {
   /* Data_t */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataDictLN_Data_t));
   G__memfunc_setup("Data_t",589,G__DataDict_561_0_1, 105, G__get_linked_tagnum(&G__DataDictLN_Data_t), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMidasHeader",1379,G__DataDict_561_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"h - - 0 - ei h - - 0 - tm "
"h - - 0 - serial h - - 0 - ts "
"h - - 0 - ds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMidasHeader",1367,G__DataDict_561_0_3, 85, G__get_linked_tagnum(&G__DataDictLN_MidasHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaenHeader",1260,G__DataDict_561_0_4, 121, -1, -1, 0, 9, 1, 1, 0, 
"h - - 0 - cID h - - 0 - ceS "
"h - - 0 - cbID h - - 0 - cres "
"h - - 0 - cpat h - - 0 - cg_m "
"h - - 0 - cr h - - 0 - ce_c "
"h - - 0 - cttt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaenHeader",1248,G__DataDict_561_0_5, 85, G__get_linked_tagnum(&G__DataDictLN_CaenHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserHeader",1300,G__DataDict_561_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nbg i - - 0 - nbdt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUserHeader",1288,G__DataDict_561_0_7, 85, G__get_linked_tagnum(&G__DataDictLN_UserHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOdbSettings",1426,G__DataDict_561_0_8, 121, -1, -1, 0, 14, 1, 1, 0, 
"d - - 0 - Omini_freq d - - 0 - Omini_duration "
"d - - 0 - Oglobal_range_min D - - 0 - Ogroup_range_min "
"d - - 0 - Oglobal_trig_thres D - - 0 - Ogroup_trig_thres "
"D - - 0 - Ocalib_slope D - - 0 - Ocalib_offset "
"h - - 0 - Opost_trigger h - - 0 - Ogroup_muliplicity "
"G - - 0 - Ogroup_enable G - - 0 - Ochannel_enable "
"g - - 0 - Oext_trig g - - 0 - Olocal_trig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOdbSettings",1414,G__DataDict_561_0_9, 85, G__get_linked_tagnum(&G__DataDictLN_OdbSettings), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChannel",997,G__DataDict_561_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Channel_t' - 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannel",985,G__DataDict_561_0_11, 85, G__get_linked_tagnum(&G__DataDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataDict_561_0_12, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Data_t::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataDict_561_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Data_t::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataDict_561_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Data_t::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataDict_561_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Data_t::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataDict_561_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataDict_561_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Data_t::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataDict_561_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Data_t::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataDict_561_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Data_t::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataDict_561_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Data_t::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Data_t", 589, G__DataDict_561_0_24, (int) ('i'), G__get_linked_tagnum(&G__DataDictLN_Data_t), -1, 0, 1, 1, 1, 0, "u 'Data_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Data_t", 715, G__DataDict_561_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataDict_561_0_26, (int) ('u'), G__get_linked_tagnum(&G__DataDictLN_Data_t), -1, 1, 1, 1, 1, 0, "u 'Data_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRun_t(void) {
   /* Run_t */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataDictLN_Run_t));
   G__memfunc_setup("Run_t",520,G__DataDict_562_0_1, 105, G__get_linked_tagnum(&G__DataDictLN_Run_t), -1, 0, 0, 1, 1, 0, "", "init. internal data structures", (void*) NULL, 0);
   G__memfunc_setup("Run_t",520,G__DataDict_562_0_2, 105, G__get_linked_tagnum(&G__DataDictLN_Run_t), -1, 0, 1, 1, 1, 0, "C - - 10 - fName", "init. internal data structures and calls OpenRun() method", (void*) NULL, 0);
   G__memfunc_setup("OpenRun",711,G__DataDict_562_0_3, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fName", "opens ROOT file", (void*) NULL, 0);
   G__memfunc_setup("CloseRun",811,G__DataDict_562_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", "closes ROOT file", (void*) NULL, 0);
   G__memfunc_setup("RunLoaded",894,G__DataDict_562_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", "returns true if data available, i.e. run is open", (void*) NULL, 0);
   G__memfunc_setup("RunNotLoaded",1199,G__DataDict_562_0_6, 103, -1, -1, 0, 0, 1, 1, 0, "", "returns true is data is NOT available, i.e. run is NOT open", (void*) NULL, 0);
   G__memfunc_setup("GetEventID",943,G__DataDict_562_0_7, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns event ID from Midas header", (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__DataDict_562_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns time stamp from Midas header", (void*) NULL, 0);
   G__memfunc_setup("GetEventSize",1213,G__DataDict_562_0_9, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns event size from Caen header", (void*) NULL, 0);
   G__memfunc_setup("GetGroupMask",1209,G__DataDict_562_0_10, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns group mask from Caen header", (void*) NULL, 0);
   G__memfunc_setup("GetRunDuration",1435,G__DataDict_562_0_11, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns run duration is seconds", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfEvents",1715,G__DataDict_562_0_12, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns the total number of events in open run", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfGroups",1726,G__DataDict_562_0_13, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns the number of groups (a group contains 8 DAQ channels that are sampled simultaniously)", (void*) NULL, 0);
   G__memfunc_setup("GetGroupID",954,G__DataDict_562_0_14, 104, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - serialGroupNumber", "returns the group ID (a fix number tagging the group) when provided with a group serial number in the range zero to \"number of groups - 1\"", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfChannels",1898,G__DataDict_562_0_15, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns the number of channels", (void*) NULL, 0);
   G__memfunc_setup("GetChannelID",1126,G__DataDict_562_0_16, 104, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - serialChannelNumber", "returns the channel ID (a fix number tagging each channel) when provided with a channel serial number, please see previous comments related to group ID's and serial number", (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfSamples",1811,G__DataDict_562_0_17, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns the number of samples per channel/event, this number is fixed for each run and identical from event to event and channel to channel due to the way teh DAQ works", (void*) NULL, 0);
   G__memfunc_setup("GetSamplingFrequency",2061,G__DataDict_562_0_18, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns the sampling frequency in MHz, this number is fixed for each run obviously", (void*) NULL, 0);
   G__memfunc_setup("GetSamplingDuration",1953,G__DataDict_562_0_19, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns the duration in us of each channel/event, this number is fixed for each run and identical for all channels and events", (void*) NULL, 0);
   G__memfunc_setup("GetGlobalInputRange",1902,G__DataDict_562_0_20, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns the global input range, this parameter allows to scale the raw data to mV, it is valid only when the group's input range is set to (double)1 therefore flaging the user choice to use the default global parameter, this number represents the minimum in mV of the input range, the maximum value can be calculate by adding 2000 mV", (void*) NULL, 0);
   G__memfunc_setup("GetInputRange",1309,G__DataDict_562_0_21, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - groupID", "returns the input range for a specific group ID (NOT group serial number) as those parameters are set in the database ordered by their absolute group ID, if this value is (double)1 the value of the global input range must be considered for the specific group", (void*) NULL, 0);
   G__memfunc_setup("GetGlobalTriggerThreshold",2546,G__DataDict_562_0_22, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns the global trigger threshold, this parameter is the trigger threshold in mV and applies to all groups that do not have a custom trigger threshold which is flag by a value of (double)0", (void*) NULL, 0);
   G__memfunc_setup("GetTriggerThreshold",1953,G__DataDict_562_0_23, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - groupID", "returns the trigger threshold for the specific group ID, if the returned value is (double)0 the global trigger threshold must be considered", (void*) NULL, 0);
   G__memfunc_setup("GetCalibrationFactor",2023,G__DataDict_562_0_24, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - channelID", "returns the calibration factor (in y = mx + b, the m parameter, in [nA/ADC#]) for the specific channel ID (once again the absolute channel ID is used here and NOT the serial channel number because data is ordered like this is the database and it allows to compare data from various runs)", (void*) NULL, 0);
   G__memfunc_setup("GetCalibrationTerm",1824,G__DataDict_562_0_25, 100, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - channelID", "returns the calibration term (in y = mx + b, the b parameter, in [nA])", (void*) NULL, 0);
   G__memfunc_setup("GetPostTriggerFraction",2256,G__DataDict_562_0_26, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns a number between 0 and 1 indicating the fraction of the event/channel duration after the trigger", (void*) NULL, 0);
   G__memfunc_setup("GetPreTriggerFraction",2129,G__DataDict_562_0_27, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns a number between 0 and 1 indicating the fraction of the event/channel duration before the trigger", (void*) NULL, 0);
   G__memfunc_setup("GetExternalTriggerStatus",2491,G__DataDict_562_0_28, 103, -1, -1, 0, 0, 1, 1, 0, "", "returns yes if the external trigger was enabled, no otherwise", (void*) NULL, 0);
   G__memfunc_setup("GetLocalTriggerStatus",2147,G__DataDict_562_0_29, 103, -1, -1, 0, 0, 1, 1, 0, "", "returns yes if the local trigger was enabled, no otherwise", (void*) NULL, 0);
   G__memfunc_setup("GetGroupMultiplicity",2102,G__DataDict_562_0_30, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns the number of groups required to get a trigger before a global trigger (inducing data recording) is set", (void*) NULL, 0);
   G__memfunc_setup("GetGroupEnable",1396,G__DataDict_562_0_31, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - groupID", "returns yes if the specific group (absolute group ID) has participated in the trigger when local trigger is enabled and if data from the group has been acquired, no otherwise", (void*) NULL, 0);
   G__memfunc_setup("GetChannelEnable",1568,G__DataDict_562_0_32, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - channelID", "returns yes if the specific channel (absolute channel ID) has participated in the trigger when local trigger is enabled, no otherwise", (void*) NULL, 0);
   G__memfunc_setup("GetTimeScale",1175,G__DataDict_562_0_33, 68, -1, -1, 0, 0, 1, 1, 0, "", "returns a pointer to a buffer holding the time scale valid for all events/channels, buffer is allocated and cleared by this class, units are in [us]", (void*) NULL, 0);
   G__memfunc_setup("GetRawData",964,G__DataDict_562_0_34, 73, -1, -1, 0, 0, 1, 1, 0, "", "returns a pointer to a buffer holding the raw data for the set event and channel", (void*) NULL, 0);
   G__memfunc_setup("GetScaledData",1254,G__DataDict_562_0_35, 68, -1, -1, 0, 0, 1, 1, 0, "", "returns a pointer to a buffer holding the scaled data in [mV]", (void*) NULL, 0);
   G__memfunc_setup("GetCalibratedData",1669,G__DataDict_562_0_36, 68, -1, -1, 0, 0, 1, 1, 0, "", "returns a pointer to a buffer holding the calibrated data in [nA]", (void*) NULL, 0);
   G__memfunc_setup("GetFrequencySpectrum",2085,G__DataDict_562_0_37, 68, -1, -1, 0, 0, 1, 1, 0, "", "returns a pointer to a buffer holding the frequency spectrum after calling ApplyFilter()", (void*) NULL, 0);
   G__memfunc_setup("GetFilterShape",1399,G__DataDict_562_0_38, 68, -1, -1, 0, 0, 1, 1, 0, "", "returns a pointer to a buffer holding the Butterworth filter shape after calling ApplyFilter()", (void*) NULL, 0);
   G__memfunc_setup("GetCurrentEventID",1682,G__DataDict_562_0_39, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns the current event ID", (void*) NULL, 0);
   G__memfunc_setup("GetCurrentSerialChannelNumber",2949,G__DataDict_562_0_40, 104, -1, -1, 0, 0, 1, 1, 0, "", "returns the serial channel number", (void*) NULL, 0);
   G__memfunc_setup("GetLowPrecisionEventTime",2447,G__DataDict_562_0_41, 100, -1, -1, 0, 0, 1, 1, 0, "", "return the event time measure by the host computer (UNIX time) in seconds", (void*) NULL, 0);
   G__memfunc_setup("GetHighPrecisionEventRelativeTime",3353,G__DataDict_562_0_42, 100, -1, -1, 0, 0, 1, 1, 0, "", "returns the relative time as measured by the CAEN hardware in seconds (this time comes from a hardware counter that loops and so it is useful to compared events closer in time than about 34 seconds; the resolution is 1 / sampling frequency in its units are [us]; total duration is 2^31 clocks at the sampling frequency, the most significative bit tags the overflow and the DAQ does not reset the counter during the run)", (void*) NULL, 0);
   G__memfunc_setup("SetCurrentData",1417,G__DataDict_562_0_43, 105, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - eventID h - - 0 - serialChannelNumber", "set the data from the eventID and serialChannelNumber which is between zero and the value returned by GetNumberOfChannels(), returns an error code or zero if succesful", (void*) NULL, 0);
   G__memfunc_setup("GetMinMaxRawData",1550,G__DataDict_562_0_44, 121, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - min I - - 0 - max "
"g - - 0 'true' init", "computes the min and max of raw data, if the flag init is true internal registers are initialized with the value of the calling parameters", (void*) NULL, 0);
   G__memfunc_setup("GetMinMaxScaledData",1840,G__DataDict_562_0_45, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - - 0 - min D - - 0 - max "
"g - - 0 'true' init", "computes the min and max of scaled data, if the flag init is true the internal registers are initialized to the value of the calling parameters", (void*) NULL, 0);
   G__memfunc_setup("GetMinMaxCalibratedData",2255,G__DataDict_562_0_46, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - - 0 - min D - - 0 - max "
"g - - 0 'true' init", "computes the min and max of calibrated data, if the flag init is true the internal registers are initialized to the value of the calling parameters", (void*) NULL, 0);
   G__memfunc_setup("GetNoiseSubtractedIntegratedSignal",3476,G__DataDict_562_0_47, 105, -1, -1, 0, 4, 1, 1, 0, 
"D - - 0 - totalCharge h - - 0 '(unsigned int)25' binScalingFactor "
"d - - 0 '5.0' thresholdInSigma h - - 0 '62' gridCH", "returns the charge as a function of time and the total charge on the current channel. The second parameter is a factor that divides the total number of samples to obtain the number of bins for the histogram. The third parameter defines the threshold for the signal area in terms of number of sigmas of the noise distribution. The fourth parameter specifies the grid channel in order to distinguish the grid signal which is positive from the strip signals which are negative.", (void*) NULL, 0);
   G__memfunc_setup("SubtractBaseline",1643,G__DataDict_562_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", "subtracts the baseline from the calibrated data and returns the baseline", (void*) NULL, 0);
   G__memfunc_setup("GetFFTData",890,G__DataDict_562_0_49, 68, -1, -1, 0, 5, 1, 1, 0, 
"D - - 0 - data i - - 0 - Filteropt "
"d - - 0 - f1 d - - 0 - f2 "
"i - - 0 - n", "returns input data after applying a frequency filter. The second parameter is the option to either use bandpass (FilterOpt=0) or bandstop (FilterOpt=1) filter. The third and fourth parameter are the cutoff frequencies in Hz. The last parameter is the order of the Bufferworth filter.", (void*) NULL, 0);
   G__memfunc_setup("ApplyFilter",1132,G__DataDict_562_0_50, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - FilterOpt d - - 0 - f1 "
"d - - 0 - f2 i - - 0 - n", "applies selected filter on current channel and event. The current set data are overwritten by the filtered data. Also returns modified frequency spectrum and the filter shape.", (void*) NULL, 0);
   G__memfunc_setup("GetSpectrum",1139,G__DataDict_562_0_51, 105, -1, -1, 0, 0, 1, 1, 0, "", "returns frequency spectrum of current channel and event.", (void*) NULL, 0);
   G__memfunc_setup("butter",662,G__DataDict_562_0_52, 68, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", "returns the coefficients to build an n-th order Butterworth filter.", (void*) NULL, 0);
   G__memfunc_setup("GetChannelMapping",1701,G__DataDict_562_0_53, 73, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - mappingID i - - 0 '1' DchMap", "returns channel mapping for current run and mapping ID (date of mapping)", (void*) NULL, 0);
   G__memfunc_setup("GetDriftVelocity",1640,G__DataDict_562_0_54, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - gasID", "returns drift velocity for selected gas calculated from properties in database. The parameter is the gas ID: 0 = P10, 1 = Xe(98)CF4(2).", (void*) NULL, 0);
   G__memfunc_setup("UseCalibDB",910,G__DataDict_562_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' use", "set whether calibration values are read from the database", (void*) NULL, 0);
   G__memfunc_setup("GetCalibrationValues",2040,G__DataDict_562_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - chID", "plots the calibration values of the selected channel", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataDict_562_0_57, 85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Run_t::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataDict_562_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Run_t::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataDict_562_0_59, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Run_t::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataDict_562_0_60, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Run_t::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataDict_562_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataDict_562_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Run_t::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataDict_562_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Run_t::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataDict_562_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Run_t::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataDict_562_0_68, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Run_t::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Run_t", 520, G__DataDict_562_0_69, (int) ('i'), G__get_linked_tagnum(&G__DataDictLN_Run_t), -1, 0, 1, 1, 1, 0, "u 'Run_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Run_t", 646, G__DataDict_562_0_70, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataDict_562_0_71, (int) ('u'), G__get_linked_tagnum(&G__DataDictLN_Run_t), -1, 1, 1, 1, 1, 0, "u 'Run_t' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDataDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDataDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDataDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DataDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DataDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__DataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__DataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DataDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__DataDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DataDictLN_TSQLServer = { "TSQLServer" , 99 , -1 };
G__linked_taginfo G__DataDictLN_Channel_t = { "Channel_t" , 99 , -1 };
G__linked_taginfo G__DataDictLN_MidasHeader = { "MidasHeader" , 99 , -1 };
G__linked_taginfo G__DataDictLN_CaenHeader = { "CaenHeader" , 99 , -1 };
G__linked_taginfo G__DataDictLN_UserHeader = { "UserHeader" , 99 , -1 };
G__linked_taginfo G__DataDictLN_OdbSettings = { "OdbSettings" , 99 , -1 };
G__linked_taginfo G__DataDictLN_Data_t = { "Data_t" , 99 , -1 };
G__linked_taginfo G__DataDictLN_Run_t = { "Run_t" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDataDict() {
  G__DataDictLN_TClass.tagnum = -1 ;
  G__DataDictLN_TBuffer.tagnum = -1 ;
  G__DataDictLN_TMemberInspector.tagnum = -1 ;
  G__DataDictLN_TObject.tagnum = -1 ;
  G__DataDictLN_string.tagnum = -1 ;
  G__DataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataDictLN_TObjArray.tagnum = -1 ;
  G__DataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataDictLN_TArrayI.tagnum = -1 ;
  G__DataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DataDictLN_TTree.tagnum = -1 ;
  G__DataDictLN_TFile.tagnum = -1 ;
  G__DataDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__DataDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DataDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DataDictLN_TSQLServer.tagnum = -1 ;
  G__DataDictLN_Channel_t.tagnum = -1 ;
  G__DataDictLN_MidasHeader.tagnum = -1 ;
  G__DataDictLN_CaenHeader.tagnum = -1 ;
  G__DataDictLN_UserHeader.tagnum = -1 ;
  G__DataDictLN_OdbSettings.tagnum = -1 ;
  G__DataDictLN_Data_t.tagnum = -1 ;
  G__DataDictLN_Run_t.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDataDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DataDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__DataDictLN_string);
   G__get_linked_tagnum_fwd(&G__DataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__DataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__DataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__DataDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataDictLN_TSQLServer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataDictLN_Channel_t),sizeof(Channel_t),-1,292096,(char*)NULL,G__setup_memvarChannel_t,G__setup_memfuncChannel_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataDictLN_MidasHeader),sizeof(MidasHeader),-1,263424,(char*)NULL,G__setup_memvarMidasHeader,G__setup_memfuncMidasHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataDictLN_CaenHeader),sizeof(CaenHeader),-1,263424,(char*)NULL,G__setup_memvarCaenHeader,G__setup_memfuncCaenHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataDictLN_UserHeader),sizeof(UserHeader),-1,263424,(char*)NULL,G__setup_memvarUserHeader,G__setup_memfuncUserHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataDictLN_OdbSettings),sizeof(OdbSettings),-1,263424,(char*)NULL,G__setup_memvarOdbSettings,G__setup_memfuncOdbSettings);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataDictLN_Data_t),sizeof(Data_t),-1,292096,(char*)NULL,G__setup_memvarData_t,G__setup_memfuncData_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataDictLN_Run_t),sizeof(Run_t),-1,324864,(char*)NULL,G__setup_memvarRun_t,G__setup_memfuncRun_t);
}
extern "C" void G__cpp_setupDataDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDataDict()");
  G__set_cpp_environmentDataDict();
  G__cpp_setup_tagtableDataDict();

  G__cpp_setup_inheritanceDataDict();

  G__cpp_setup_typetableDataDict();

  G__cpp_setup_memvarDataDict();

  G__cpp_setup_memfuncDataDict();
  G__cpp_setup_globalDataDict();
  G__cpp_setup_funcDataDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDataDict();
  return;
}
class G__cpp_setup_initDataDict {
  public:
    G__cpp_setup_initDataDict() { G__add_setup_func("DataDict",(G__incsetup)(&G__cpp_setupDataDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDataDict() { G__remove_setup_func("DataDict"); }
};
G__cpp_setup_initDataDict G__cpp_setup_initializerDataDict;

